#include "fmt/format.h"
#include "tray_ui.h"
#include <climits>
#import <cstring>
#include <fstream>
#include <iostream>
#include <objc/objc-runtime.h>
#import <objc/objc.h>
#include <services/service_manager.h>
#include <utility/time_utils.h>

bool TrayUI::shouldQuit = false;

static id app;
static id pool;
static id statusBar;
static id statusItem;
static id statusBarButton;

void StartSystemCallback(struct tray_menu* item) {
    SM::getDeviceManager()->start();
}

void StopSystemCallback(struct tray_menu* item) {
    SM::getDeviceManager()->stop();
}

void QuitCallback(struct tray_menu* item) {
    TrayUI::shouldQuit = true;
}

static void menu_callback(id self, SEL cmd, id sender) {
    id asdf = ((id(*)(id, SEL))objc_msgSend)(sender, sel_registerName("representedObject"));
    struct tray_menu* m
        = ((struct tray_menu * (*)(id, SEL)) objc_msgSend)(asdf, sel_registerName("pointerValue"));
    if (m != NULL && m->cb != NULL) {
        m->cb(m);
    }
}

static id _tray_menu(struct tray_menu* m) {
    id menu = ((id(*)(id, SEL))objc_msgSend)((id)objc_getClass("NSMenu"), sel_registerName("new"));
    ((void (*)(id, SEL))objc_msgSend)(menu, sel_registerName("autorelease"));
    ((void (*)(id, SEL, bool))objc_msgSend)(menu, sel_registerName("setAutoenablesItems:"), false);

    for (; m != NULL && m->text != NULL; m++) {
        if (strcmp(m->text, "-") == 0) {
            ((void (*)(id, SEL, id))
                 objc_msgSend)(menu,
                               sel_registerName("addItem:"),
                               ((id(*)(id, SEL))objc_msgSend)((id)objc_getClass("NSMenuItem"),
                                                              sel_registerName("separatorItem")));
        } else {
            id menuItem = ((id(*)(id, SEL))objc_msgSend)((id)objc_getClass("NSMenuItem"),
                                                         sel_registerName("alloc"));
            ((void (*)(id, SEL))objc_msgSend)(menuItem, sel_registerName("autorelease"));
            ((void (*)(id, SEL, id, SEL, id))
                 objc_msgSend)(menuItem,
                               sel_registerName("initWithTitle:action:keyEquivalent:"),
                               ((id(*)(id, SEL, char*))objc_msgSend)((id)objc_getClass("NSString"),
                                                                     sel_registerName(
                                                                         "stringWithUTF8String:"),
                                                                     m->text),
                               sel_registerName("menuCallback:"),
                               ((id(*)(id, SEL, char*))objc_msgSend)((id)objc_getClass("NSString"),
                                                                     sel_registerName(
                                                                         "stringWithUTF8String:"),
                                                                     ""));

            ((void (*)(id, SEL, bool))objc_msgSend)(menuItem,
                                                    sel_registerName("setEnabled:"),
                                                    m->disabled == 0);
            ((void (*)(id, SEL, int))objc_msgSend)(menuItem,
                                                   sel_registerName("setState:"),
                                                   (m->checked ? 1 : 0));
            ((void (*)(id, SEL, id))objc_msgSend)(menuItem,
                                                  sel_registerName("setRepresentedObject:"),
                                                  ((id(*)(id, SEL, struct tray_menu*))
                                                       objc_msgSend)((id)objc_getClass("NSValue"),
                                                                     sel_registerName(
                                                                         "valueWithPointer:"),
                                                                     m));

            ((void (*)(id, SEL, id))objc_msgSend)(menu, sel_registerName("addItem:"), menuItem);

            if (m->submenu != NULL) {
                ((void (*)(id, SEL, id, id))objc_msgSend)(menu,
                                                          sel_registerName("setSubmenu:forItem:"),
                                                          _tray_menu(m->submenu),
                                                          menuItem);
            }
        }
    }

    return menu;
}

// Raw PNG data for tray icon
uint8_t iconData[]
    = {0x89, 0x50, 0x4e, 0x47, 0xd,  0xa,  0x1a, 0xa,  0x0,  0x0,  0x0,  0xd,  0x49, 0x48, 0x44,
       0x52, 0x0,  0x0,  0x0,  0x14, 0x0,  0x0,  0x0,  0x14, 0x8,  0x6,  0x0,  0x0,  0x0,  0x8d,
       0x89, 0x1d, 0xd,  0x0,  0x0,  0x4,  0xba, 0x69, 0x54, 0x58, 0x74, 0x58, 0x4d, 0x4c, 0x3a,
       0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x78, 0x6d, 0x70, 0x0,  0x0,
       0x0,  0x0,  0x0,  0x3c, 0x3f, 0x78, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x62, 0x65,
       0x67, 0x69, 0x6e, 0x3d, 0x22, 0xef, 0xbb, 0xbf, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x57,
       0x35, 0x4d, 0x30, 0x4d, 0x70, 0x43, 0x65, 0x68, 0x69, 0x48, 0x7a, 0x72, 0x65, 0x53, 0x7a,
       0x4e, 0x54, 0x63, 0x7a, 0x6b, 0x63, 0x39, 0x64, 0x22, 0x3f, 0x3e, 0xa,  0x3c, 0x78, 0x3a,
       0x78, 0x6d, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78,
       0x3d, 0x22, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x3a, 0x6e, 0x73, 0x3a, 0x6d, 0x65, 0x74, 0x61,
       0x2f, 0x22, 0x20, 0x78, 0x3a, 0x78, 0x6d, 0x70, 0x74, 0x6b, 0x3d, 0x22, 0x58, 0x4d, 0x50,
       0x20, 0x43, 0x6f, 0x72, 0x65, 0x20, 0x35, 0x2e, 0x35, 0x2e, 0x30, 0x22, 0x3e, 0xa,  0x20,
       0x3c, 0x72, 0x64, 0x66, 0x3a, 0x52, 0x44, 0x46, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a,
       0x72, 0x64, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
       0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x30, 0x32,
       0x2f, 0x32, 0x32, 0x2d, 0x72, 0x64, 0x66, 0x2d, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2d,
       0x6e, 0x73, 0x23, 0x22, 0x3e, 0xa,  0x20, 0x20, 0x3c, 0x72, 0x64, 0x66, 0x3a, 0x44, 0x65,
       0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x64, 0x66, 0x3a, 0x61,
       0x62, 0x6f, 0x75, 0x74, 0x3d, 0x22, 0x22, 0xa,  0x20, 0x20, 0x20, 0x20, 0x78, 0x6d, 0x6c,
       0x6e, 0x73, 0x3a, 0x65, 0x78, 0x69, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
       0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
       0x78, 0x69, 0x66, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x22, 0xa,  0x20, 0x20, 0x20, 0x20, 0x78,
       0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x74, 0x69, 0x66, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
       0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
       0x2f, 0x74, 0x69, 0x66, 0x66, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x22, 0xa,  0x20, 0x20, 0x20,
       0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x68, 0x6f,
       0x70, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64,
       0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x68,
       0x6f, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x22, 0xa,  0x20, 0x20, 0x20, 0x20, 0x78, 0x6d,
       0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x6d, 0x70, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
       0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78,
       0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x22, 0xa,  0x20, 0x20, 0x20, 0x20, 0x78, 0x6d,
       0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
       0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
       0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x6d, 0x6d, 0x2f, 0x22, 0xa,  0x20,
       0x20, 0x20, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x73, 0x74, 0x45, 0x76, 0x74, 0x3d,
       0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62,
       0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x73,
       0x54, 0x79, 0x70, 0x65, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76,
       0x65, 0x6e, 0x74, 0x23, 0x22, 0xa,  0x20, 0x20, 0x20, 0x65, 0x78, 0x69, 0x66, 0x3a, 0x50,
       0x69, 0x78, 0x65, 0x6c, 0x58, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3d,
       0x22, 0x32, 0x30, 0x22, 0xa,  0x20, 0x20, 0x20, 0x65, 0x78, 0x69, 0x66, 0x3a, 0x50, 0x69,
       0x78, 0x65, 0x6c, 0x59, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22,
       0x32, 0x30, 0x22, 0xa,  0x20, 0x20, 0x20, 0x65, 0x78, 0x69, 0x66, 0x3a, 0x43, 0x6f, 0x6c,
       0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x3d, 0x22, 0x31, 0x22, 0xa,  0x20, 0x20, 0x20,
       0x74, 0x69, 0x66, 0x66, 0x3a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68,
       0x3d, 0x22, 0x32, 0x30, 0x22, 0xa,  0x20, 0x20, 0x20, 0x74, 0x69, 0x66, 0x66, 0x3a, 0x49,
       0x6d, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3d, 0x22, 0x32, 0x30, 0x22,
       0xa,  0x20, 0x20, 0x20, 0x74, 0x69, 0x66, 0x66, 0x3a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
       0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x3d, 0x22, 0x32, 0x22, 0xa,  0x20, 0x20,
       0x20, 0x74, 0x69, 0x66, 0x66, 0x3a, 0x58, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
       0x6f, 0x6e, 0x3d, 0x22, 0x37, 0x32, 0x2e, 0x30, 0x22, 0xa,  0x20, 0x20, 0x20, 0x74, 0x69,
       0x66, 0x66, 0x3a, 0x59, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x3d,
       0x22, 0x37, 0x32, 0x2e, 0x30, 0x22, 0xa,  0x20, 0x20, 0x20, 0x70, 0x68, 0x6f, 0x74, 0x6f,
       0x73, 0x68, 0x6f, 0x70, 0x3a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x3d,
       0x22, 0x33, 0x22, 0xa,  0x20, 0x20, 0x20, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x68, 0x6f,
       0x70, 0x3a, 0x49, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3d, 0x22, 0x73,
       0x52, 0x47, 0x42, 0x20, 0x49, 0x45, 0x43, 0x36, 0x31, 0x39, 0x36, 0x36, 0x2d, 0x32, 0x2e,
       0x31, 0x22, 0xa,  0x20, 0x20, 0x20, 0x78, 0x6d, 0x70, 0x3a, 0x4d, 0x6f, 0x64, 0x69, 0x66,
       0x79, 0x44, 0x61, 0x74, 0x65, 0x3d, 0x22, 0x32, 0x30, 0x32, 0x30, 0x2d, 0x30, 0x34, 0x2d,
       0x31, 0x30, 0x54, 0x31, 0x35, 0x3a, 0x34, 0x35, 0x3a, 0x34, 0x30, 0x2d, 0x30, 0x34, 0x3a,
       0x30, 0x30, 0x22, 0xa,  0x20, 0x20, 0x20, 0x78, 0x6d, 0x70, 0x3a, 0x4d, 0x65, 0x74, 0x61,
       0x64, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x3d, 0x22, 0x32, 0x30, 0x32, 0x30, 0x2d,
       0x30, 0x34, 0x2d, 0x31, 0x30, 0x54, 0x31, 0x35, 0x3a, 0x34, 0x35, 0x3a, 0x34, 0x30, 0x2d,
       0x30, 0x34, 0x3a, 0x30, 0x30, 0x22, 0x3e, 0xa,  0x20, 0x20, 0x20, 0x3c, 0x78, 0x6d, 0x70,
       0x4d, 0x4d, 0x3a, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x3e, 0xa,  0x20, 0x20, 0x20,
       0x20, 0x3c, 0x72, 0x64, 0x66, 0x3a, 0x53, 0x65, 0x71, 0x3e, 0xa,  0x20, 0x20, 0x20, 0x20,
       0x20, 0x3c, 0x72, 0x64, 0x66, 0x3a, 0x6c, 0x69, 0xa,  0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
       0x73, 0x74, 0x45, 0x76, 0x74, 0x3a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x70,
       0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x22, 0xa,  0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
       0x73, 0x74, 0x45, 0x76, 0x74, 0x3a, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x41,
       0x67, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x20,
       0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x20, 0x28, 0x53, 0x65, 0x70, 0x20, 0x32,
       0x32, 0x20, 0x32, 0x30, 0x31, 0x39, 0x29, 0x22, 0xa,  0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
       0x73, 0x74, 0x45, 0x76, 0x74, 0x3a, 0x77, 0x68, 0x65, 0x6e, 0x3d, 0x22, 0x32, 0x30, 0x32,
       0x30, 0x2d, 0x30, 0x34, 0x2d, 0x31, 0x30, 0x54, 0x31, 0x35, 0x3a, 0x34, 0x35, 0x3a, 0x34,
       0x30, 0x2d, 0x30, 0x34, 0x3a, 0x30, 0x30, 0x22, 0x2f, 0x3e, 0xa,  0x20, 0x20, 0x20, 0x20,
       0x3c, 0x2f, 0x72, 0x64, 0x66, 0x3a, 0x53, 0x65, 0x71, 0x3e, 0xa,  0x20, 0x20, 0x20, 0x3c,
       0x2f, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x3e,
       0xa,  0x20, 0x20, 0x3c, 0x2f, 0x72, 0x64, 0x66, 0x3a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
       0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0xa,  0x20, 0x3c, 0x2f, 0x72, 0x64, 0x66, 0x3a, 0x52,
       0x44, 0x46, 0x3e, 0xa,  0x3c, 0x2f, 0x78, 0x3a, 0x78, 0x6d, 0x70, 0x6d, 0x65, 0x74, 0x61,
       0x3e, 0xa,  0x3c, 0x3f, 0x78, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x65, 0x6e, 0x64,
       0x3d, 0x22, 0x72, 0x22, 0x3f, 0x3e, 0xfa, 0xb7, 0x71, 0xf4, 0x0,  0x0,  0x1,  0x82, 0x69,
       0x43, 0x43, 0x50, 0x73, 0x52, 0x47, 0x42, 0x20, 0x49, 0x45, 0x43, 0x36, 0x31, 0x39, 0x36,
       0x36, 0x2d, 0x32, 0x2e, 0x31, 0x0,  0x0,  0x28, 0x91, 0x75, 0x91, 0xcf, 0x2b, 0x44, 0x51,
       0x14, 0xc7, 0x3f, 0x66, 0x46, 0xc4, 0x4c, 0x94, 0x59, 0x50, 0x16, 0x2f, 0xd,  0x2b, 0xe4,
       0x47, 0x89, 0x8d, 0x32, 0xd2, 0x50, 0x93, 0xa6, 0x31, 0xca, 0x60, 0x33, 0xf3, 0xcc, 0xf,
       0x35, 0x6f, 0xbc, 0xde, 0x9b, 0x49, 0xb2, 0x55, 0xb6, 0x53, 0x94, 0xd8, 0xf8, 0xb5, 0xe0,
       0x2f, 0x60, 0xab, 0xac, 0x95, 0x22, 0x52, 0xb2, 0xb2, 0xb0, 0x26, 0x36, 0xe8, 0x39, 0xcf,
       0x4c, 0xcd, 0x24, 0x73, 0x6f, 0xf7, 0x9e, 0xcf, 0xfd, 0xde, 0x73, 0x4e, 0xe7, 0x9e, 0xb,
       0x8e, 0x48, 0x46, 0xd5, 0x4c, 0x57, 0x1f, 0x68, 0xd9, 0x9c, 0x11, 0xe,  0xf8, 0x95, 0xb9,
       0xe8, 0xbc, 0x52, 0xf7, 0x8c, 0x4b, 0xa6, 0x97, 0x36, 0x3c, 0x31, 0xd5, 0xd4, 0xc7, 0x42,
       0xa1, 0x20, 0x55, 0xc7, 0xc7, 0x1d, 0x35, 0xb6, 0xbd, 0xe9, 0xb1, 0x73, 0x55, 0xf7, 0xfb,
       0x77, 0x34, 0x2e, 0x25, 0x4c, 0x15, 0x6a, 0xea, 0x85, 0x47, 0x55, 0xdd, 0xc8, 0x9,  0x4f,
       0xa,  0x7,  0x57, 0x73, 0xba, 0xcd, 0xdb, 0xc2, 0x5e, 0x35, 0x1d, 0x5b, 0x12, 0x3e, 0x15,
       0xee, 0x36, 0xa4, 0x40, 0xe1, 0x5b, 0x5b, 0x8f, 0x17, 0xf9, 0xc5, 0xe6, 0x54, 0x91, 0xbf,
       0x6c, 0x36, 0x22, 0xe1, 0x71, 0x70, 0x34, 0xb,  0x2b, 0xa9, 0xa,  0x8e, 0x57, 0xb0, 0x9a,
       0x36, 0x34, 0x61, 0x79, 0x39, 0x3e, 0x2d, 0x93, 0x57, 0x4b, 0xf5, 0xd8, 0x2f, 0x71, 0x27,
       0xb2, 0xb3, 0x33, 0x62, 0x3b, 0x64, 0xb5, 0x63, 0x12, 0x26, 0x80, 0x1f, 0x85, 0x29, 0x26,
       0x18, 0x67, 0x88, 0x7e, 0x46, 0x64, 0x1f, 0xa2, 0x87, 0x1,  0x7a, 0xe5, 0x44, 0x95, 0xf8,
       0xbe, 0xdf, 0xf8, 0x69, 0x56, 0x24, 0x56, 0x95, 0x5d, 0x67, 0xd,  0x83, 0x65, 0x52, 0xa4,
       0xc9, 0xd1, 0x2d, 0x6a, 0x5e, 0xb2, 0x27, 0xc4, 0x26, 0x45, 0x4f, 0xc8, 0xcc, 0xb0, 0x66,
       0xf7, 0xff, 0x6f, 0x5f, 0xcd, 0xe4, 0xe0, 0x40, 0x31, 0xbb, 0xdb, 0xf,  0xb5, 0x4f, 0x96,
       0xf5, 0xd6, 0x9,  0x75, 0x5b, 0xf0, 0x5d, 0xb0, 0xac, 0xcf, 0x43, 0xcb, 0xfa, 0x3e, 0x2,
       0xe7, 0x23, 0x5c, 0x64, 0xcb, 0xf1, 0x2b, 0x7,  0x30, 0xfc, 0x2e, 0x7a, 0xa1, 0xac, 0xf9,
       0xf6, 0xa1, 0x69, 0x3,  0xce, 0x2e, 0xcb, 0x5a, 0x7c, 0x7,  0xce, 0x37, 0xa1, 0xf5, 0x41,
       0x8f, 0x19, 0xb1, 0x5f, 0xc9, 0x29, 0xcb, 0x91, 0x4c, 0xc2, 0xeb, 0x9,  0x78, 0xa2, 0xd0,
       0x72, 0xd,  0xd,  0xb,  0xc5, 0x9e, 0x95, 0xee, 0x39, 0xbe, 0x87, 0xc8, 0xba, 0x7c, 0xd5,
       0x15, 0xec, 0xee, 0x41, 0x97, 0xf8, 0x37, 0x2d, 0xfe, 0x0,  0x4,  0x8c, 0x67, 0xb9, 0x8b,
       0x8,  0x7,  0x92, 0x0,  0x0,  0x0,  0x9,  0x70, 0x48, 0x59, 0x73, 0x0,  0x0,  0xb,  0x13,
       0x0,  0x0,  0xb,  0x13, 0x1,  0x0,  0x9a, 0x9c, 0x18, 0x0,  0x0,  0x0,  0xd6, 0x49, 0x44,
       0x41, 0x54, 0x38, 0x8d, 0xdd, 0x93, 0xb1, 0x11, 0xc2, 0x30, 0xc,  0x45, 0x1d, 0xee, 0xd8,
       0x20, 0xd9, 0x3,  0x36, 0xc8, 0x6,  0xd0, 0xa4, 0x66, 0x4,  0x38, 0x26, 0x48, 0x5,  0x2d,
       0x3,  0xe0, 0x5,  0xa0, 0x80, 0x11, 0xd8, 0x0,  0x96, 0x48, 0x93, 0x3b, 0x2a, 0xba, 0x34,
       0x8f, 0x82, 0x4,  0xc,  0x91, 0x15, 0x87, 0xe,  0x7e, 0xeb, 0xaf, 0x27, 0xd9, 0x5f, 0x36,
       0xe6, 0x6f, 0x5,  0x44, 0xc0, 0x1a, 0x28, 0x80, 0xa5, 0xcf, 0x94, 0x2,  0x17, 0x60, 0x1,
       0x24, 0x1d, 0x30, 0xcb, 0x4b, 0x85, 0xcf, 0x78, 0x72, 0x4c, 0x15, 0x70, 0x4,  0xa6, 0xc0,
       0x50, 0x81, 0x1,  0xac, 0x7c, 0xc0, 0xc,  0x28, 0x69, 0xab, 0x4,  0x36, 0xc0, 0x58, 0x80,
       0x6d, 0x81, 0x48, 0x7b, 0x9b, 0x4,  0xd8, 0x9,  0x50, 0x49, 0x3a, 0x2c, 0x70, 0xda, 0xfe,
       0x30, 0x7,  0x1a, 0x2b, 0xd3, 0x8e, 0xa4, 0x9a, 0x41, 0x7,  0xf3, 0x6a, 0x8c, 0xb9, 0x79,
       0xce, 0x66, 0x7d, 0xa7, 0x93, 0xd2, 0x74, 0x55, 0xe2, 0xa4, 0xff, 0xd,  0xcc, 0xa,  0xd7,
       0x9f, 0x68, 0x90, 0x5c, 0x99, 0xc6, 0xd6, 0x4d, 0x12, 0xde, 0x83, 0x3a, 0x68, 0x40, 0x5f,
       0xaa, 0x16, 0x27, 0xcd, 0xda, 0xd7, 0xa8, 0x2,  0x62, 0xd,  0x2a, 0xed, 0x60, 0x6b, 0x35,
       0x3e, 0x3c, 0xf3, 0x90, 0x37, 0xdc, 0x37, 0x6e, 0xa5, 0x71, 0x73, 0x9b, 0x73, 0x8,  0xf0,
       0x59, 0xa0, 0x78, 0x32, 0x1e, 0x7f, 0x3f, 0xed, 0x4,  0x3a, 0x5,  0x79, 0x90, 0xf9, 0xa7,
       0x74, 0x7,  0x39, 0x81, 0x1a, 0xd4, 0xbc, 0x87, 0x60, 0xdc, 0x0,  0x0,  0x0,  0x0,  0x49,
       0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82};
int iconDataLength = 1912;

// Utility: Load image binary data into an array and print it to the command line
// Used to generate static in-memory image array
void arrayFromImage(std::string filename) {
    std::ifstream fl(filename);
    fl.seekg(0, std::ios::end);
    size_t len = fl.tellg();
    int tempIconDataLength = len;
    char* tempIconData = new char[len];
    fl.seekg(0, std::ios::beg);
    fl.read(tempIconData, len);
    fl.close();

    SM::getLogger()->info(fmt::format("Icon Data Length: {}", iconDataLength));
    int lineLen = 0;
    for (int i = 0; i < iconDataLength; i++) {
        std::cout << fmt::format("{:#x}, ", (unsigned char)iconData[i]);
        lineLen += 1;
        if (lineLen > 19) {
            lineLen = 0;
            std::cout << "\n";
        }
    }
}

void TrayUI::init() {
    SM::getLogger()->info("Started Tray UI.");

    pool = ((id(*)(id, SEL))objc_msgSend)((id)objc_getClass("NSAutoreleasePool"),
                                          sel_registerName("new"));
    ((void (*)(id, SEL))objc_msgSend)((id)objc_getClass("NSApplication"),
                                      sel_registerName("sharedApplication"));

    Class trayDelegateClass = objc_allocateClassPair(objc_getClass("NSObject"), "Tray", 0);
    class_addProtocol(trayDelegateClass, objc_getProtocol("NSApplicationDelegate"));
    class_addMethod(trayDelegateClass,
                    sel_registerName("menuCallback:"),
                    (IMP)menu_callback,
                    "v@:@");
    objc_registerClassPair(trayDelegateClass);

    id trayDelegate
        = ((id(*)(id, SEL))objc_msgSend)((id)trayDelegateClass, sel_registerName("new"));

    app = ((id(*)(id, SEL))objc_msgSend)((id)objc_getClass("NSApplication"),
                                         sel_registerName("sharedApplication"));

    ((void (*)(id, SEL, id))objc_msgSend)(app, sel_registerName("setDelegate:"), trayDelegate);
    statusBar = ((id(*)(id, SEL))objc_msgSend)((id)objc_getClass("NSStatusBar"),
                                               sel_registerName("systemStatusBar"));
    statusItem = ((id(*)(id, SEL, double))objc_msgSend)(statusBar,
                                                        sel_registerName("statusItemWithLength:"),
                                                        -1.0);

    ((void (*)(id, SEL))objc_msgSend)(statusItem, sel_registerName("retain"));
    ((void (*)(id, SEL, bool))objc_msgSend)(statusItem,
                                            sel_registerName("setHighlightMode:"),
                                            true);
    statusBarButton = ((id(*)(id, SEL))objc_msgSend)(statusItem, sel_registerName("button"));
    TrayUI::updateMenu();
    ((void (*)(id, SEL, bool))objc_msgSend)(app,
                                            sel_registerName("activateIgnoringOtherApps:"),
                                            true);
}

struct tray trayDefinition = {
    .menu = (struct tray_menu[]){{"TelemetryJet Server v0.1.0", 1, 0, NULL, NULL},
                                 {"-", 0, 0, NULL, NULL},
                                 {"Quit", 0, 0, QuitCallback, NULL},
                                 {NULL, 0, 0, NULL, NULL}},
};

void TrayUI::updateMenu() {

    id iconDataObject
        = ((id(*)(id, SEL, uint8_t*, unsigned long))objc_msgSend)((id)objc_getClass("NSData"),
                                                                  sel_registerName(
                                                                      "dataWithBytes:length:"),
                                                                  iconData,
                                                                  iconDataLength);
    id iconImage = ((id(*)(id, SEL, id))
                        objc_msgSend)(((id(*)(id, SEL))objc_msgSend)((id)objc_getClass("NSImage"),
                                                                     sel_registerName("alloc")),
                                      sel_registerName("initWithData:"),
                                      iconDataObject);

    ((void (*)(id, SEL, id))objc_msgSend)(statusBarButton,
                                          sel_registerName("setImage:"),
                                          iconImage);
    ((void (*)(id, SEL, id))objc_msgSend)(statusItem,
                                          sel_registerName("setMenu:"),
                                          _tray_menu(trayDefinition.menu));
}

void TrayUI::update() {
    id until = ((id(*)(id, SEL))objc_msgSend)((id)objc_getClass("NSDate"),
                                              sel_registerName("distantPast"));
    id event
        = ((id(*)(id, SEL, unsigned long, id, id, bool))
               objc_msgSend)(app,
                             sel_registerName("nextEventMatchingMask:untilDate:inMode:dequeue:"),
                             ULONG_MAX,
                             until,
                             ((id(*)(id, SEL, char*))objc_msgSend)((id)objc_getClass("NSString"),
                                                                   sel_registerName(
                                                                       "stringWithUTF8String:"),
                                                                   "kCFRunLoopDefaultMode"),
                             true);
    if (event) {
        ((void (*)(id, SEL, id))objc_msgSend)(app, sel_registerName("sendEvent:"), event);
    }
}

void TrayUI::destroy() {
    SM::getLogger()->info("Stopped Tray UI.");
}